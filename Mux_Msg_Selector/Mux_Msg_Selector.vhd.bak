library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Mux_Msg_Selector is
   port (
      estado_fsm       	: in STD_LOGIC_VECTOR(2 downto 0);  -- Estado atual da FSM
      total_inserido   	: in STD_LOGIC_VECTOR(7 downto 0);  -- Valor total inserido
      troco_armazenado 	: in STD_LOGIC_VECTOR(7 downto 0);  -- Valor do troco
      produto_escolhido	: in STD_LOGIC_VECTOR(3 downto 0);  -- Número do prouto escolhido
		preco_produto		: in STD_LOGIC_VECTOR(7 downto 0);  -- Preço do produto escolhido
		valor_displays   	: out STD_LOGIC_VECTOR(23 downto 0) -- Valor a ser exibido nos displays
   );
end Mux_Msg_Selector;

architecture Behavioral of Mux_Msg_Selector is
   -- Códigos para os caracteres no display de 7 segmentos
   constant CHAR_E : STD_LOGIC_VECTOR(6 downto 0) := "0000110";  -- 'E'
   constant CHAR_P : STD_LOGIC_VECTOR(6 downto 0) := "0001100";  -- 'P'
   constant CHAR_S : STD_LOGIC_VECTOR(6 downto 0) := "0010010";  -- 'S'
   constant CHAR_L : STD_LOGIC_VECTOR(6 downto 0) := "1000111";  -- 'L'
   constant CHAR_T : STD_LOGIC_VECTOR(6 downto 0) := "0000111";  -- 'T'
   constant CHAR_R : STD_LOGIC_VECTOR(6 downto 0) := "0101111";  -- 'R'
begin
   process(estado_fsm, total_inserido, troco_armazenado)
   begin
      case estado_fsm is
         when "000" =>  -- Estado ESPERA: Exibir "EP xxx"
            valor_displays <= CHAR_E & CHAR_P & "0000" & total_inserido(7 downto 4) & total_inserido(3 downto 0);
         when "001" =>  -- Estado SELECAO: Exibir "SL xxx"
            valor_displays <= CHAR_S & CHAR_L & "0000" & total_inserido(7 downto 4) & total_inserido(3 downto 0);
         when "010" =>  -- Estado TROCO: Exibir "TR xxx"
            valor_displays <= CHAR_T & CHAR_R & "0000" & troco_armazenado(7 downto 4) & troco_armazenado(3 downto 0);
			when "011" =>  -- Estado LIBERA_PRODUTO: Exibir "PL xxx"
            valor_displays <= CHAR_T & CHAR_R & "000000" & produto_escolhido(3 downto 0);
			when "100" =>  -- Estado ERRO: Exibir "ERRO"
            valor_displays <= CHAR_E & CHAR_R & CHAR_R & CHAR_O & "0000000";
			when "101" =>  -- Estado FINALIZADO: Exibir "F"
            valor_displays <= CHAR_F & "0000000";
         when others =>  -- Estado inválido ou padrão
            valor_displays <= (others => '0');  -- Apagado
      end case;
   end process;
end Behavioral;